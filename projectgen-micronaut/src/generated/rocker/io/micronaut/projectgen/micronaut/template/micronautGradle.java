package io.micronaut.projectgen.micronaut.template;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import java.util.List;
// import @ [2:1]
import java.util.Set;
// import @ [3:1]
import java.util.Map;
// import @ [4:1]
import io.micronaut.projectgen.core.buildtools.Dockerfile;
// import @ [5:1]
import io.micronaut.projectgen.core.buildtools.BuildTool;
// import @ [6:1]
import io.micronaut.projectgen.core.buildtools.gradle.GradleDsl;

/*
 * Auto generated code to render template io/micronaut/projectgen/micronaut/template/micronautGradle.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class micronautGradle extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.RAW; }
    static public String getTemplateName() { return "micronautGradle.rocker.raw"; }
    static public String getTemplatePackageName() { return "io.micronaut.projectgen.micronaut.template"; }
    static public String getHeaderHash() { return "-606872362"; }
    static public String[] getArgumentNames() { return new String[] { "dsl", "build", "javaVersion", "dockerfile", "dockerfileNative", "dockerBuilderImages", "dockerBuilderNativeImages", "runtime", "testRuntime", "aotVersion", "incremental", "packageName", "additionalTestResourceModules", "sharedTestResources", "aotKeys", "lambdaRuntimeMainClass", "ignoredAutomaticDependencies" }; }

    // argument @ [7:2]
    private GradleDsl dsl;
    // argument @ [7:2]
    private BuildTool build;
    // argument @ [7:2]
    private String javaVersion;
    // argument @ [7:2]
    private Dockerfile dockerfile;
    // argument @ [7:2]
    private Dockerfile dockerfileNative;
    // argument @ [7:2]
    private List<String> dockerBuilderImages;
    // argument @ [7:2]
    private List<String> dockerBuilderNativeImages;
    // argument @ [7:2]
    private String runtime;
    // argument @ [7:2]
    private String testRuntime;
    // argument @ [7:2]
    private String aotVersion;
    // argument @ [7:2]
    private boolean incremental;
    // argument @ [7:2]
    private String packageName;
    // argument @ [7:2]
    private List<String> additionalTestResourceModules;
    // argument @ [7:2]
    private boolean sharedTestResources;
    // argument @ [7:2]
    private Map<String,String> aotKeys;
    // argument @ [7:2]
    private String lambdaRuntimeMainClass;
    // argument @ [7:2]
    private Set<String> ignoredAutomaticDependencies;

    public micronautGradle dsl(GradleDsl dsl) {
        this.dsl = dsl;
        return this;
    }

    public GradleDsl dsl() {
        return this.dsl;
    }

    public micronautGradle build(BuildTool build) {
        this.build = build;
        return this;
    }

    public BuildTool build() {
        return this.build;
    }

    public micronautGradle javaVersion(String javaVersion) {
        this.javaVersion = javaVersion;
        return this;
    }

    public String javaVersion() {
        return this.javaVersion;
    }

    public micronautGradle dockerfile(Dockerfile dockerfile) {
        this.dockerfile = dockerfile;
        return this;
    }

    public Dockerfile dockerfile() {
        return this.dockerfile;
    }

    public micronautGradle dockerfileNative(Dockerfile dockerfileNative) {
        this.dockerfileNative = dockerfileNative;
        return this;
    }

    public Dockerfile dockerfileNative() {
        return this.dockerfileNative;
    }

    public micronautGradle dockerBuilderImages(List<String> dockerBuilderImages) {
        this.dockerBuilderImages = dockerBuilderImages;
        return this;
    }

    public List<String> dockerBuilderImages() {
        return this.dockerBuilderImages;
    }

    public micronautGradle dockerBuilderNativeImages(List<String> dockerBuilderNativeImages) {
        this.dockerBuilderNativeImages = dockerBuilderNativeImages;
        return this;
    }

    public List<String> dockerBuilderNativeImages() {
        return this.dockerBuilderNativeImages;
    }

    public micronautGradle runtime(String runtime) {
        this.runtime = runtime;
        return this;
    }

    public String runtime() {
        return this.runtime;
    }

    public micronautGradle testRuntime(String testRuntime) {
        this.testRuntime = testRuntime;
        return this;
    }

    public String testRuntime() {
        return this.testRuntime;
    }

    public micronautGradle aotVersion(String aotVersion) {
        this.aotVersion = aotVersion;
        return this;
    }

    public String aotVersion() {
        return this.aotVersion;
    }

    public micronautGradle incremental(boolean incremental) {
        this.incremental = incremental;
        return this;
    }

    public boolean incremental() {
        return this.incremental;
    }

    public micronautGradle packageName(String packageName) {
        this.packageName = packageName;
        return this;
    }

    public String packageName() {
        return this.packageName;
    }

    public micronautGradle additionalTestResourceModules(List<String> additionalTestResourceModules) {
        this.additionalTestResourceModules = additionalTestResourceModules;
        return this;
    }

    public List<String> additionalTestResourceModules() {
        return this.additionalTestResourceModules;
    }

    public micronautGradle sharedTestResources(boolean sharedTestResources) {
        this.sharedTestResources = sharedTestResources;
        return this;
    }

    public boolean sharedTestResources() {
        return this.sharedTestResources;
    }

    public micronautGradle aotKeys(Map<String,String> aotKeys) {
        this.aotKeys = aotKeys;
        return this;
    }

    public Map<String,String> aotKeys() {
        return this.aotKeys;
    }

    public micronautGradle lambdaRuntimeMainClass(String lambdaRuntimeMainClass) {
        this.lambdaRuntimeMainClass = lambdaRuntimeMainClass;
        return this;
    }

    public String lambdaRuntimeMainClass() {
        return this.lambdaRuntimeMainClass;
    }

    public micronautGradle ignoredAutomaticDependencies(Set<String> ignoredAutomaticDependencies) {
        this.ignoredAutomaticDependencies = ignoredAutomaticDependencies;
        return this;
    }

    public Set<String> ignoredAutomaticDependencies() {
        return this.ignoredAutomaticDependencies;
    }

    static public micronautGradle template(GradleDsl dsl, BuildTool build, String javaVersion, Dockerfile dockerfile, Dockerfile dockerfileNative, List<String> dockerBuilderImages, List<String> dockerBuilderNativeImages, String runtime, String testRuntime, String aotVersion, boolean incremental, String packageName, List<String> additionalTestResourceModules, boolean sharedTestResources, Map<String,String> aotKeys, String lambdaRuntimeMainClass, Set<String> ignoredAutomaticDependencies) {
        return new micronautGradle()
            .dsl(dsl)
            .build(build)
            .javaVersion(javaVersion)
            .dockerfile(dockerfile)
            .dockerfileNative(dockerfileNative)
            .dockerBuilderImages(dockerBuilderImages)
            .dockerBuilderNativeImages(dockerBuilderNativeImages)
            .runtime(runtime)
            .testRuntime(testRuntime)
            .aotVersion(aotVersion)
            .incremental(incremental)
            .packageName(packageName)
            .additionalTestResourceModules(additionalTestResourceModules)
            .sharedTestResources(sharedTestResources)
            .aotKeys(aotKeys)
            .lambdaRuntimeMainClass(lambdaRuntimeMainClass)
            .ignoredAutomaticDependencies(ignoredAutomaticDependencies);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for performance (via rocker.optimize flag; no auto reloading)
        return new Template(this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // \nmicronaut {\n
        static private final byte[] PLAIN_TEXT_0_0;
        // \n
        static private final byte[] PLAIN_TEXT_1_0;
        // \n    ignoredAutomaticDependencies.add(\"
        static private final byte[] PLAIN_TEXT_2_0;
        // \")\n
        static private final byte[] PLAIN_TEXT_3_0;
        // \n    runtime(\"
        static private final byte[] PLAIN_TEXT_4_0;
        // \n    testRuntime(\"
        static private final byte[] PLAIN_TEXT_5_0;
        // \n    nativeLambda {\n        lambdaRuntimeClassName = \"
        static private final byte[] PLAIN_TEXT_6_0;
        // \"\n    }\n
        static private final byte[] PLAIN_TEXT_7_0;
        // \n    processing {\n        incremental(true)\n        annotations(\"
        static private final byte[] PLAIN_TEXT_8_0;
        // .*\")\n    }\n
        static private final byte[] PLAIN_TEXT_9_0;
        // \n    testResources {\n        
        static private final byte[] PLAIN_TEXT_10_0;
        // \n            
        static private final byte[] PLAIN_TEXT_11_0;
        // \n        additionalModules.add(\"
        static private final byte[] PLAIN_TEXT_12_0;
        // \")\n            
        static private final byte[] PLAIN_TEXT_13_0;
        // \n        
        static private final byte[] PLAIN_TEXT_14_0;
        // \n        sharedServer = true\n        
        static private final byte[] PLAIN_TEXT_15_0;
        // \n    }\n
        static private final byte[] PLAIN_TEXT_16_0;
        // \n}\n\n
        static private final byte[] PLAIN_TEXT_17_0;
        // \n\n
        static private final byte[] PLAIN_TEXT_18_0;
        // \ndockerBuildNative {\n    images = [\n    
        static private final byte[] PLAIN_TEXT_19_0;
        // \n        \"
        static private final byte[] PLAIN_TEXT_20_0;
        // \"
        static private final byte[] PLAIN_TEXT_21_0;
        // ,
        static private final byte[] PLAIN_TEXT_22_0;
        // \n    
        static private final byte[] PLAIN_TEXT_23_0;
        // \n    ]\n}\n
        static private final byte[] PLAIN_TEXT_24_0;
        // \ndockerBuild {\n    images = [\n    
        static private final byte[] PLAIN_TEXT_25_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(micronautGradle.class.getClassLoader(), micronautGradle.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
            PLAIN_TEXT_4_0 = loader.tryGet("PLAIN_TEXT_4_0");
            PLAIN_TEXT_5_0 = loader.tryGet("PLAIN_TEXT_5_0");
            PLAIN_TEXT_6_0 = loader.tryGet("PLAIN_TEXT_6_0");
            PLAIN_TEXT_7_0 = loader.tryGet("PLAIN_TEXT_7_0");
            PLAIN_TEXT_8_0 = loader.tryGet("PLAIN_TEXT_8_0");
            PLAIN_TEXT_9_0 = loader.tryGet("PLAIN_TEXT_9_0");
            PLAIN_TEXT_10_0 = loader.tryGet("PLAIN_TEXT_10_0");
            PLAIN_TEXT_11_0 = loader.tryGet("PLAIN_TEXT_11_0");
            PLAIN_TEXT_12_0 = loader.tryGet("PLAIN_TEXT_12_0");
            PLAIN_TEXT_13_0 = loader.tryGet("PLAIN_TEXT_13_0");
            PLAIN_TEXT_14_0 = loader.tryGet("PLAIN_TEXT_14_0");
            PLAIN_TEXT_15_0 = loader.tryGet("PLAIN_TEXT_15_0");
            PLAIN_TEXT_16_0 = loader.tryGet("PLAIN_TEXT_16_0");
            PLAIN_TEXT_17_0 = loader.tryGet("PLAIN_TEXT_17_0");
            PLAIN_TEXT_18_0 = loader.tryGet("PLAIN_TEXT_18_0");
            PLAIN_TEXT_19_0 = loader.tryGet("PLAIN_TEXT_19_0");
            PLAIN_TEXT_20_0 = loader.tryGet("PLAIN_TEXT_20_0");
            PLAIN_TEXT_21_0 = loader.tryGet("PLAIN_TEXT_21_0");
            PLAIN_TEXT_22_0 = loader.tryGet("PLAIN_TEXT_22_0");
            PLAIN_TEXT_23_0 = loader.tryGet("PLAIN_TEXT_23_0");
            PLAIN_TEXT_24_0 = loader.tryGet("PLAIN_TEXT_24_0");
            PLAIN_TEXT_25_0 = loader.tryGet("PLAIN_TEXT_25_0");
        }

        // argument @ [7:2]
        protected final GradleDsl dsl;
        // argument @ [7:2]
        protected final BuildTool build;
        // argument @ [7:2]
        protected final String javaVersion;
        // argument @ [7:2]
        protected final Dockerfile dockerfile;
        // argument @ [7:2]
        protected final Dockerfile dockerfileNative;
        // argument @ [7:2]
        protected final List<String> dockerBuilderImages;
        // argument @ [7:2]
        protected final List<String> dockerBuilderNativeImages;
        // argument @ [7:2]
        protected final String runtime;
        // argument @ [7:2]
        protected final String testRuntime;
        // argument @ [7:2]
        protected final String aotVersion;
        // argument @ [7:2]
        protected final boolean incremental;
        // argument @ [7:2]
        protected final String packageName;
        // argument @ [7:2]
        protected final List<String> additionalTestResourceModules;
        // argument @ [7:2]
        protected final boolean sharedTestResources;
        // argument @ [7:2]
        protected final Map<String,String> aotKeys;
        // argument @ [7:2]
        protected final String lambdaRuntimeMainClass;
        // argument @ [7:2]
        protected final Set<String> ignoredAutomaticDependencies;

        public Template(micronautGradle model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.dsl = model.dsl();
            this.build = model.build();
            this.javaVersion = model.javaVersion();
            this.dockerfile = model.dockerfile();
            this.dockerfileNative = model.dockerfileNative();
            this.dockerBuilderImages = model.dockerBuilderImages();
            this.dockerBuilderNativeImages = model.dockerBuilderNativeImages();
            this.runtime = model.runtime();
            this.testRuntime = model.testRuntime();
            this.aotVersion = model.aotVersion();
            this.incremental = model.incremental();
            this.packageName = model.packageName();
            this.additionalTestResourceModules = model.additionalTestResourceModules();
            this.sharedTestResources = model.sharedTestResources();
            this.aotKeys = model.aotKeys();
            this.lambdaRuntimeMainClass = model.lambdaRuntimeMainClass();
            this.ignoredAutomaticDependencies = model.ignoredAutomaticDependencies();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [25:2]
            __internal.aboutToExecutePosInTemplate(25, 2);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // IfBlockBegin @ [27:1]
            __internal.aboutToExecutePosInTemplate(27, 1);
            if (ignoredAutomaticDependencies != null) {
                // PlainText @ [27:44]
                __internal.aboutToExecutePosInTemplate(27, 44);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // ForBlockBegin @ [28:1]
                __internal.aboutToExecutePosInTemplate(28, 1);
                try {
                    final com.fizzed.rocker.runtime.IterableForIterator<String> __forIterator0 = new com.fizzed.rocker.runtime.IterableForIterator<String>(ignoredAutomaticDependencies);
                    while (__forIterator0.hasNext()) {
                        final String ignoredAutomaticDependency = __forIterator0.next();
                        try {
                            // PlainText @ [28:74]
                            __internal.aboutToExecutePosInTemplate(28, 74);
                            __internal.writeValue(PLAIN_TEXT_2_0);
                            // EvalExpression @ [29:39]
                            __internal.aboutToExecutePosInTemplate(29, 39);
                            __internal.renderValue((ignoredAutomaticDependency), false);
                            // PlainText @ [29:68]
                            __internal.aboutToExecutePosInTemplate(29, 68);
                            __internal.writeValue(PLAIN_TEXT_3_0);
                            // ForBlockEnd @ [28:1]
                            __internal.aboutToExecutePosInTemplate(28, 1);
                        } catch (com.fizzed.rocker.runtime.ContinueException e) {
                            // support for continuing for loops
                        }
                    } // for end @ [28:1]
                } catch (com.fizzed.rocker.runtime.BreakException e) {
                    // support for breaking for loops
                }
                // PlainText @ [30:2]
                __internal.aboutToExecutePosInTemplate(30, 2);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // IfBlockEnd @ [27:1]
                __internal.aboutToExecutePosInTemplate(27, 1);
            } // if end @ [27:1]
            // PlainText @ [31:2]
            __internal.aboutToExecutePosInTemplate(31, 2);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // IfBlockBegin @ [32:1]
            __internal.aboutToExecutePosInTemplate(32, 1);
            if (runtime != null) {
                // PlainText @ [32:23]
                __internal.aboutToExecutePosInTemplate(32, 23);
                __internal.writeValue(PLAIN_TEXT_4_0);
                // EvalExpression @ [33:14]
                __internal.aboutToExecutePosInTemplate(33, 14);
                __internal.renderValue((runtime), false);
                // PlainText @ [33:24]
                __internal.aboutToExecutePosInTemplate(33, 24);
                __internal.writeValue(PLAIN_TEXT_3_0);
                // IfBlockEnd @ [32:1]
                __internal.aboutToExecutePosInTemplate(32, 1);
            } // if end @ [32:1]
            // PlainText @ [34:2]
            __internal.aboutToExecutePosInTemplate(34, 2);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // IfBlockBegin @ [35:1]
            __internal.aboutToExecutePosInTemplate(35, 1);
            if (testRuntime != null) {
                // PlainText @ [35:27]
                __internal.aboutToExecutePosInTemplate(35, 27);
                __internal.writeValue(PLAIN_TEXT_5_0);
                // EvalExpression @ [36:18]
                __internal.aboutToExecutePosInTemplate(36, 18);
                __internal.renderValue((testRuntime), false);
                // PlainText @ [36:32]
                __internal.aboutToExecutePosInTemplate(36, 32);
                __internal.writeValue(PLAIN_TEXT_3_0);
                // IfBlockEnd @ [35:1]
                __internal.aboutToExecutePosInTemplate(35, 1);
            } // if end @ [35:1]
            // PlainText @ [37:2]
            __internal.aboutToExecutePosInTemplate(37, 2);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // IfBlockBegin @ [38:1]
            __internal.aboutToExecutePosInTemplate(38, 1);
            if (lambdaRuntimeMainClass != null) {
                // PlainText @ [38:38]
                __internal.aboutToExecutePosInTemplate(38, 38);
                __internal.writeValue(PLAIN_TEXT_6_0);
                // EvalExpression @ [40:35]
                __internal.aboutToExecutePosInTemplate(40, 35);
                __internal.renderValue((lambdaRuntimeMainClass), false);
                // PlainText @ [40:60]
                __internal.aboutToExecutePosInTemplate(40, 60);
                __internal.writeValue(PLAIN_TEXT_7_0);
                // IfBlockEnd @ [38:1]
                __internal.aboutToExecutePosInTemplate(38, 1);
            } // if end @ [38:1]
            // PlainText @ [42:2]
            __internal.aboutToExecutePosInTemplate(42, 2);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // IfBlockBegin @ [43:1]
            __internal.aboutToExecutePosInTemplate(43, 1);
            if (incremental) {
                // PlainText @ [43:19]
                __internal.aboutToExecutePosInTemplate(43, 19);
                __internal.writeValue(PLAIN_TEXT_8_0);
                // EvalExpression @ [46:22]
                __internal.aboutToExecutePosInTemplate(46, 22);
                __internal.renderValue((packageName), false);
                // PlainText @ [46:36]
                __internal.aboutToExecutePosInTemplate(46, 36);
                __internal.writeValue(PLAIN_TEXT_9_0);
                // IfBlockEnd @ [43:1]
                __internal.aboutToExecutePosInTemplate(43, 1);
            } // if end @ [43:1]
            // PlainText @ [48:2]
            __internal.aboutToExecutePosInTemplate(48, 2);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // IfBlockBegin @ [49:1]
            __internal.aboutToExecutePosInTemplate(49, 1);
            if (additionalTestResourceModules != null || sharedTestResources) {
                // PlainText @ [49:69]
                __internal.aboutToExecutePosInTemplate(49, 69);
                __internal.writeValue(PLAIN_TEXT_10_0);
                // IfBlockBegin @ [51:9]
                __internal.aboutToExecutePosInTemplate(51, 9);
                if (additionalTestResourceModules != null) {
                    // PlainText @ [51:53]
                    __internal.aboutToExecutePosInTemplate(51, 53);
                    __internal.writeValue(PLAIN_TEXT_11_0);
                    // ForBlockBegin @ [52:13]
                    __internal.aboutToExecutePosInTemplate(52, 13);
                    try {
                        final com.fizzed.rocker.runtime.IterableForIterator<String> __forIterator1 = new com.fizzed.rocker.runtime.IterableForIterator<String>(additionalTestResourceModules);
                        while (__forIterator1.hasNext()) {
                            final String module = __forIterator1.next();
                            try {
                                // PlainText @ [52:67]
                                __internal.aboutToExecutePosInTemplate(52, 67);
                                __internal.writeValue(PLAIN_TEXT_12_0);
                                // ValueExpression @ [53:32]
                                __internal.aboutToExecutePosInTemplate(53, 32);
                                __internal.renderValue(module, false);
                                // PlainText @ [53:39]
                                __internal.aboutToExecutePosInTemplate(53, 39);
                                __internal.writeValue(PLAIN_TEXT_13_0);
                                // ForBlockEnd @ [52:13]
                                __internal.aboutToExecutePosInTemplate(52, 13);
                            } catch (com.fizzed.rocker.runtime.ContinueException e) {
                                // support for continuing for loops
                            }
                        } // for end @ [52:13]
                    } catch (com.fizzed.rocker.runtime.BreakException e) {
                        // support for breaking for loops
                    }
                    // PlainText @ [54:14]
                    __internal.aboutToExecutePosInTemplate(54, 14);
                    __internal.writeValue(PLAIN_TEXT_14_0);
                    // IfBlockEnd @ [51:9]
                    __internal.aboutToExecutePosInTemplate(51, 9);
                } // if end @ [51:9]
                // PlainText @ [55:10]
                __internal.aboutToExecutePosInTemplate(55, 10);
                __internal.writeValue(PLAIN_TEXT_14_0);
                // IfBlockBegin @ [56:9]
                __internal.aboutToExecutePosInTemplate(56, 9);
                if (sharedTestResources) {
                    // PlainText @ [56:35]
                    __internal.aboutToExecutePosInTemplate(56, 35);
                    __internal.writeValue(PLAIN_TEXT_15_0);
                    // IfBlockEnd @ [56:9]
                    __internal.aboutToExecutePosInTemplate(56, 9);
                } // if end @ [56:9]
                // PlainText @ [58:10]
                __internal.aboutToExecutePosInTemplate(58, 10);
                __internal.writeValue(PLAIN_TEXT_16_0);
                // IfBlockEnd @ [49:1]
                __internal.aboutToExecutePosInTemplate(49, 1);
            } // if end @ [49:1]
            // PlainText @ [60:2]
            __internal.aboutToExecutePosInTemplate(60, 2);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // IfBlockBegin @ [61:1]
            __internal.aboutToExecutePosInTemplate(61, 1);
            if (aotVersion != null) {
                // PlainText @ [61:26]
                __internal.aboutToExecutePosInTemplate(61, 26);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // ValueExpression @ [62:1]
                __internal.aboutToExecutePosInTemplate(62, 1);
                __internal.renderValue(io.micronaut.projectgen.micronaut.template.aotExtension.template(aotKeys), false);
                // PlainText @ [62:75]
                __internal.aboutToExecutePosInTemplate(62, 75);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // IfBlockEnd @ [61:1]
                __internal.aboutToExecutePosInTemplate(61, 1);
            } // if end @ [61:1]
            // PlainText @ [63:2]
            __internal.aboutToExecutePosInTemplate(63, 2);
            __internal.writeValue(PLAIN_TEXT_17_0);
            // IfBlockBegin @ [66:1]
            __internal.aboutToExecutePosInTemplate(66, 1);
            if (dockerfile != null) {
                // PlainText @ [66:26]
                __internal.aboutToExecutePosInTemplate(66, 26);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // ValueExpression @ [67:1]
                __internal.aboutToExecutePosInTemplate(67, 1);
                __internal.renderValue(dockerfileExtension.template(dsl, dockerfile), false);
                // PlainText @ [67:47]
                __internal.aboutToExecutePosInTemplate(67, 47);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // IfBlockEnd @ [66:1]
                __internal.aboutToExecutePosInTemplate(66, 1);
            } // if end @ [66:1]
            // PlainText @ [68:2]
            __internal.aboutToExecutePosInTemplate(68, 2);
            __internal.writeValue(PLAIN_TEXT_18_0);
            // IfBlockBegin @ [70:1]
            __internal.aboutToExecutePosInTemplate(70, 1);
            if (dockerfileNative != null) {
                // PlainText @ [70:32]
                __internal.aboutToExecutePosInTemplate(70, 32);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // ValueExpression @ [71:1]
                __internal.aboutToExecutePosInTemplate(71, 1);
                __internal.renderValue(dockerfileNativeExtension.template(dsl, dockerfileNative), false);
                // PlainText @ [71:59]
                __internal.aboutToExecutePosInTemplate(71, 59);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // IfBlockEnd @ [70:1]
                __internal.aboutToExecutePosInTemplate(70, 1);
            } // if end @ [70:1]
            // PlainText @ [72:2]
            __internal.aboutToExecutePosInTemplate(72, 2);
            __internal.writeValue(PLAIN_TEXT_18_0);
            // IfBlockBegin @ [74:1]
            __internal.aboutToExecutePosInTemplate(74, 1);
            if (dockerBuilderNativeImages != null) {
                // PlainText @ [74:41]
                __internal.aboutToExecutePosInTemplate(74, 41);
                __internal.writeValue(PLAIN_TEXT_19_0);
                // ForBlockBegin @ [77:5]
                __internal.aboutToExecutePosInTemplate(77, 5);
                try {
                    for (int i = 0; i < dockerBuilderNativeImages.size(); i++) {
                        try {
                            // PlainText @ [77:66]
                            __internal.aboutToExecutePosInTemplate(77, 66);
                            __internal.writeValue(PLAIN_TEXT_20_0);
                            // EvalExpression @ [78:10]
                            __internal.aboutToExecutePosInTemplate(78, 10);
                            __internal.renderValue((dockerBuilderNativeImages.get(i)), false);
                            // PlainText @ [78:45]
                            __internal.aboutToExecutePosInTemplate(78, 45);
                            __internal.writeValue(PLAIN_TEXT_21_0);
                            // IfBlockBegin @ [78:46]
                            __internal.aboutToExecutePosInTemplate(78, 46);
                            if (i < (dockerBuilderNativeImages.size() -1)) {
                                // PlainText @ [78:95]
                                __internal.aboutToExecutePosInTemplate(78, 95);
                                __internal.writeValue(PLAIN_TEXT_22_0);
                                // IfBlockEnd @ [78:46]
                                __internal.aboutToExecutePosInTemplate(78, 46);
                            } // if end @ [78:46]
                            // PlainText @ [78:97]
                            __internal.aboutToExecutePosInTemplate(78, 97);
                            __internal.writeValue(PLAIN_TEXT_23_0);
                            // ForBlockEnd @ [77:5]
                            __internal.aboutToExecutePosInTemplate(77, 5);
                        } catch (com.fizzed.rocker.runtime.ContinueException e) {
                            // support for continuing for loops
                        }
                    } // for end @ [77:5]
                } catch (com.fizzed.rocker.runtime.BreakException e) {
                    // support for breaking for loops
                }
                // PlainText @ [79:6]
                __internal.aboutToExecutePosInTemplate(79, 6);
                __internal.writeValue(PLAIN_TEXT_24_0);
                // IfBlockEnd @ [74:1]
                __internal.aboutToExecutePosInTemplate(74, 1);
            } // if end @ [74:1]
            // PlainText @ [82:2]
            __internal.aboutToExecutePosInTemplate(82, 2);
            __internal.writeValue(PLAIN_TEXT_18_0);
            // IfBlockBegin @ [84:1]
            __internal.aboutToExecutePosInTemplate(84, 1);
            if (dockerBuilderImages != null) {
                // PlainText @ [84:35]
                __internal.aboutToExecutePosInTemplate(84, 35);
                __internal.writeValue(PLAIN_TEXT_25_0);
                // ForBlockBegin @ [87:5]
                __internal.aboutToExecutePosInTemplate(87, 5);
                try {
                    for (int i = 0; i < dockerBuilderImages.size(); i++) {
                        try {
                            // PlainText @ [87:60]
                            __internal.aboutToExecutePosInTemplate(87, 60);
                            __internal.writeValue(PLAIN_TEXT_20_0);
                            // EvalExpression @ [88:10]
                            __internal.aboutToExecutePosInTemplate(88, 10);
                            __internal.renderValue((dockerBuilderImages.get(i)), false);
                            // PlainText @ [88:39]
                            __internal.aboutToExecutePosInTemplate(88, 39);
                            __internal.writeValue(PLAIN_TEXT_21_0);
                            // IfBlockBegin @ [88:40]
                            __internal.aboutToExecutePosInTemplate(88, 40);
                            if (i < (dockerBuilderImages.size() -1)) {
                                // PlainText @ [88:83]
                                __internal.aboutToExecutePosInTemplate(88, 83);
                                __internal.writeValue(PLAIN_TEXT_22_0);
                                // IfBlockEnd @ [88:40]
                                __internal.aboutToExecutePosInTemplate(88, 40);
                            } // if end @ [88:40]
                            // PlainText @ [88:85]
                            __internal.aboutToExecutePosInTemplate(88, 85);
                            __internal.writeValue(PLAIN_TEXT_23_0);
                            // ForBlockEnd @ [87:5]
                            __internal.aboutToExecutePosInTemplate(87, 5);
                        } catch (com.fizzed.rocker.runtime.ContinueException e) {
                            // support for continuing for loops
                        }
                    } // for end @ [87:5]
                } catch (com.fizzed.rocker.runtime.BreakException e) {
                    // support for breaking for loops
                }
                // PlainText @ [89:6]
                __internal.aboutToExecutePosInTemplate(89, 6);
                __internal.writeValue(PLAIN_TEXT_24_0);
                // IfBlockEnd @ [84:1]
                __internal.aboutToExecutePosInTemplate(84, 1);
            } // if end @ [84:1]
            // PlainText @ [92:2]
            __internal.aboutToExecutePosInTemplate(92, 2);
            __internal.writeValue(PLAIN_TEXT_1_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "\nmicronaut {\n";
        static private final String PLAIN_TEXT_1_0 = "\n";
        static private final String PLAIN_TEXT_2_0 = "\n    ignoredAutomaticDependencies.add(\"";
        static private final String PLAIN_TEXT_3_0 = "\")\n";
        static private final String PLAIN_TEXT_4_0 = "\n    runtime(\"";
        static private final String PLAIN_TEXT_5_0 = "\n    testRuntime(\"";
        static private final String PLAIN_TEXT_6_0 = "\n    nativeLambda {\n        lambdaRuntimeClassName = \"";
        static private final String PLAIN_TEXT_7_0 = "\"\n    }\n";
        static private final String PLAIN_TEXT_8_0 = "\n    processing {\n        incremental(true)\n        annotations(\"";
        static private final String PLAIN_TEXT_9_0 = ".*\")\n    }\n";
        static private final String PLAIN_TEXT_10_0 = "\n    testResources {\n        ";
        static private final String PLAIN_TEXT_11_0 = "\n            ";
        static private final String PLAIN_TEXT_12_0 = "\n        additionalModules.add(\"";
        static private final String PLAIN_TEXT_13_0 = "\")\n            ";
        static private final String PLAIN_TEXT_14_0 = "\n        ";
        static private final String PLAIN_TEXT_15_0 = "\n        sharedServer = true\n        ";
        static private final String PLAIN_TEXT_16_0 = "\n    }\n";
        static private final String PLAIN_TEXT_17_0 = "\n}\n\n";
        static private final String PLAIN_TEXT_18_0 = "\n\n";
        static private final String PLAIN_TEXT_19_0 = "\ndockerBuildNative {\n    images = [\n    ";
        static private final String PLAIN_TEXT_20_0 = "\n        \"";
        static private final String PLAIN_TEXT_21_0 = "\"";
        static private final String PLAIN_TEXT_22_0 = ",";
        static private final String PLAIN_TEXT_23_0 = "\n    ";
        static private final String PLAIN_TEXT_24_0 = "\n    ]\n}\n";
        static private final String PLAIN_TEXT_25_0 = "\ndockerBuild {\n    images = [\n    ";

    }

}
