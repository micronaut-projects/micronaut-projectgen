package io.micronaut.projectgen.javalibs.template;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;

/*
 * Auto generated code to render template io/micronaut/projectgen/javalibs/template/logback.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class logback extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.RAW; }
    static public String getTemplateName() { return "logback.rocker.raw"; }
    static public String getTemplatePackageName() { return "io.micronaut.projectgen.javalibs.template"; }
    static public String getHeaderHash() { return "-373698595"; }
    static public String[] getArgumentNames() { return new String[] { "jansi", "coloring", "jul" }; }

    // argument @ [1:2]
    private boolean jansi;
    // argument @ [1:2]
    private boolean coloring;
    // argument @ [1:2]
    private boolean jul;

    public logback jansi(boolean jansi) {
        this.jansi = jansi;
        return this;
    }

    public boolean jansi() {
        return this.jansi;
    }

    public logback coloring(boolean coloring) {
        this.coloring = coloring;
        return this;
    }

    public boolean coloring() {
        return this.coloring;
    }

    public logback jul(boolean jul) {
        this.jul = jul;
        return this;
    }

    public boolean jul() {
        return this.jul;
    }

    static public logback template(boolean jansi, boolean coloring, boolean jul) {
        return new logback()
            .jansi(jansi)
            .coloring(coloring)
            .jul(jul);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for performance (via rocker.optimize flag; no auto reloading)
        return new Template(this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // \n\n<configuration>\n\n
        static private final byte[] PLAIN_TEXT_0_0;
        // \n    <contextListener class=\"ch.qos.logback.classic.jul.LevelChangePropagator\"/>\n
        static private final byte[] PLAIN_TEXT_1_0;
        // \n\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n
        static private final byte[] PLAIN_TEXT_2_0;
        // \n        <withJansi>
        static private final byte[] PLAIN_TEXT_3_0;
        // </withJansi>\n
        static private final byte[] PLAIN_TEXT_4_0;
        // \n        <!-- encoders are assigned the type\n             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->\n        <encoder>\n
        static private final byte[] PLAIN_TEXT_5_0;
        // \n            <pattern>%cyan(%d{HH:mm:ss.SSS}) %gray([%thread]) %highlight(%-5level) %magenta(%logger{36}) - %msg%n</pattern>\n
        static private final byte[] PLAIN_TEXT_6_0;
        // \n            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n
        static private final byte[] PLAIN_TEXT_7_0;
        // \n        </encoder>\n    </appender>\n\n    <root level=\"info\">\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n</configuration>\n
        static private final byte[] PLAIN_TEXT_8_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(logback.class.getClassLoader(), logback.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
            PLAIN_TEXT_4_0 = loader.tryGet("PLAIN_TEXT_4_0");
            PLAIN_TEXT_5_0 = loader.tryGet("PLAIN_TEXT_5_0");
            PLAIN_TEXT_6_0 = loader.tryGet("PLAIN_TEXT_6_0");
            PLAIN_TEXT_7_0 = loader.tryGet("PLAIN_TEXT_7_0");
            PLAIN_TEXT_8_0 = loader.tryGet("PLAIN_TEXT_8_0");
        }

        // argument @ [1:2]
        protected final boolean jansi;
        // argument @ [1:2]
        protected final boolean coloring;
        // argument @ [1:2]
        protected final boolean jul;

        public Template(logback model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.jansi = model.jansi();
            this.coloring = model.coloring();
            this.jul = model.jul();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [1:53]
            __internal.aboutToExecutePosInTemplate(1, 53);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // IfBlockBegin @ [5:1]
            __internal.aboutToExecutePosInTemplate(5, 1);
            if (jul) {
                // PlainText @ [5:10]
                __internal.aboutToExecutePosInTemplate(5, 10);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // IfBlockEnd @ [5:1]
                __internal.aboutToExecutePosInTemplate(5, 1);
            } // if end @ [5:1]
            // PlainText @ [7:2]
            __internal.aboutToExecutePosInTemplate(7, 2);
            __internal.writeValue(PLAIN_TEXT_2_0);
            // IfBlockBegin @ [10:1]
            __internal.aboutToExecutePosInTemplate(10, 1);
            if (jansi) {
                // PlainText @ [10:13]
                __internal.aboutToExecutePosInTemplate(10, 13);
                __internal.writeValue(PLAIN_TEXT_3_0);
                // ValueExpression @ [11:20]
                __internal.aboutToExecutePosInTemplate(11, 20);
                __internal.renderValue(jansi, false);
                // PlainText @ [11:26]
                __internal.aboutToExecutePosInTemplate(11, 26);
                __internal.writeValue(PLAIN_TEXT_4_0);
                // IfBlockEnd @ [10:1]
                __internal.aboutToExecutePosInTemplate(10, 1);
            } // if end @ [10:1]
            // PlainText @ [12:2]
            __internal.aboutToExecutePosInTemplate(12, 2);
            __internal.writeValue(PLAIN_TEXT_5_0);
            // IfBlockBegin @ [16:1]
            __internal.aboutToExecutePosInTemplate(16, 1);
            if (coloring) {
                // PlainText @ [16:16]
                __internal.aboutToExecutePosInTemplate(16, 16);
                __internal.writeValue(PLAIN_TEXT_6_0);
                // IfBlockElse @ [18:1]
                __internal.aboutToExecutePosInTemplate(18, 1);
            } else { // else @ [18:1]
                // PlainText @ [18:9]
                __internal.aboutToExecutePosInTemplate(18, 9);
                __internal.writeValue(PLAIN_TEXT_7_0);
                // IfBlockEnd @ [16:1]
                __internal.aboutToExecutePosInTemplate(16, 1);
            } // if end @ [16:1]
            // PlainText @ [20:2]
            __internal.aboutToExecutePosInTemplate(20, 2);
            __internal.writeValue(PLAIN_TEXT_8_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "\n\n<configuration>\n\n";
        static private final String PLAIN_TEXT_1_0 = "\n    <contextListener class=\"ch.qos.logback.classic.jul.LevelChangePropagator\"/>\n";
        static private final String PLAIN_TEXT_2_0 = "\n\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n";
        static private final String PLAIN_TEXT_3_0 = "\n        <withJansi>";
        static private final String PLAIN_TEXT_4_0 = "</withJansi>\n";
        static private final String PLAIN_TEXT_5_0 = "\n        <!-- encoders are assigned the type\n             ch.qos.logback.classic.encoder.PatternLayoutEncoder by default -->\n        <encoder>\n";
        static private final String PLAIN_TEXT_6_0 = "\n            <pattern>%cyan(%d{HH:mm:ss.SSS}) %gray([%thread]) %highlight(%-5level) %magenta(%logger{36}) - %msg%n</pattern>\n";
        static private final String PLAIN_TEXT_7_0 = "\n            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\n";
        static private final String PLAIN_TEXT_8_0 = "\n        </encoder>\n    </appender>\n\n    <root level=\"info\">\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n</configuration>\n";

    }

}
