package io.micronaut.projectgen.core.template;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import io.micronaut.projectgen.core.buildtools.Property;
// import @ [2:1]
import java.util.List;

/*
 * Auto generated code to render template io/micronaut/projectgen/core/template/mavenProperties.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class mavenProperties extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.RAW; }
    static public String getTemplateName() { return "mavenProperties.rocker.raw"; }
    static public String getTemplatePackageName() { return "io.micronaut.projectgen.core.template"; }
    static public String getHeaderHash() { return "-322394202"; }
    static public long getModifiedAt() { return 1740582768719L; }
    static public String[] getArgumentNames() { return new String[] { "properties" }; }

    // argument @ [4:2]
    private List<Property> properties;

    public mavenProperties properties(List<Property> properties) {
        this.properties = properties;
        return this;
    }

    public List<Property> properties() {
        return this.properties;
    }

    static public mavenProperties template(List<Property> properties) {
        return new mavenProperties()
            .properties(properties);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // \n\n
        static private final byte[] PLAIN_TEXT_0_0;
        // \n  <properties>\n
        static private final byte[] PLAIN_TEXT_1_0;
        // \n  
        static private final byte[] PLAIN_TEXT_2_0;
        // \n    <!--
        static private final byte[] PLAIN_TEXT_3_0;
        // -->\n  
        static private final byte[] PLAIN_TEXT_4_0;
        // \n    <
        static private final byte[] PLAIN_TEXT_5_0;
        // >
        static private final byte[] PLAIN_TEXT_6_0;
        // </
        static private final byte[] PLAIN_TEXT_7_0;
        // >\n  
        static private final byte[] PLAIN_TEXT_8_0;
        // \n
        static private final byte[] PLAIN_TEXT_9_0;
        // \n  </properties>\n
        static private final byte[] PLAIN_TEXT_10_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(mavenProperties.class.getClassLoader(), mavenProperties.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
            PLAIN_TEXT_4_0 = loader.tryGet("PLAIN_TEXT_4_0");
            PLAIN_TEXT_5_0 = loader.tryGet("PLAIN_TEXT_5_0");
            PLAIN_TEXT_6_0 = loader.tryGet("PLAIN_TEXT_6_0");
            PLAIN_TEXT_7_0 = loader.tryGet("PLAIN_TEXT_7_0");
            PLAIN_TEXT_8_0 = loader.tryGet("PLAIN_TEXT_8_0");
            PLAIN_TEXT_9_0 = loader.tryGet("PLAIN_TEXT_9_0");
            PLAIN_TEXT_10_0 = loader.tryGet("PLAIN_TEXT_10_0");
        }

        // argument @ [4:2]
        protected final List<Property> properties;

        public Template(mavenProperties model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.properties = model.properties();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [4:34]
            __internal.aboutToExecutePosInTemplate(4, 34);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // IfBlockBegin @ [6:1]
            __internal.aboutToExecutePosInTemplate(6, 1);
            if (properties != null && !properties.isEmpty()) {
                // PlainText @ [6:52]
                __internal.aboutToExecutePosInTemplate(6, 52);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // ForBlockBegin @ [8:1]
                __internal.aboutToExecutePosInTemplate(8, 1);
                try {
                    final com.fizzed.rocker.runtime.IterableForIterator<Property> __forIterator0 = new com.fizzed.rocker.runtime.IterableForIterator<Property>(properties);
                    while (__forIterator0.hasNext()) {
                        final Property prop = __forIterator0.next();
                        try {
                            // PlainText @ [8:36]
                            __internal.aboutToExecutePosInTemplate(8, 36);
                            __internal.writeValue(PLAIN_TEXT_2_0);
                            // IfBlockBegin @ [9:3]
                            __internal.aboutToExecutePosInTemplate(9, 3);
                            if (prop.isComment()) {
                                // PlainText @ [9:27]
                                __internal.aboutToExecutePosInTemplate(9, 27);
                                __internal.writeValue(PLAIN_TEXT_3_0);
                                // ValueExpression @ [10:9]
                                __internal.aboutToExecutePosInTemplate(10, 9);
                                __internal.renderValue(prop.getComment(), false);
                                // PlainText @ [10:27]
                                __internal.aboutToExecutePosInTemplate(10, 27);
                                __internal.writeValue(PLAIN_TEXT_4_0);
                                // IfBlockElse @ [11:3]
                                __internal.aboutToExecutePosInTemplate(11, 3);
                            } else { // else @ [11:3]
                                // PlainText @ [11:11]
                                __internal.aboutToExecutePosInTemplate(11, 11);
                                __internal.writeValue(PLAIN_TEXT_5_0);
                                // EvalExpression @ [12:6]
                                __internal.aboutToExecutePosInTemplate(12, 6);
                                __internal.renderValue((prop.getKey()), false);
                                // PlainText @ [12:22]
                                __internal.aboutToExecutePosInTemplate(12, 22);
                                __internal.writeValue(PLAIN_TEXT_6_0);
                                // EvalExpression @ [12:23]
                                __internal.aboutToExecutePosInTemplate(12, 23);
                                __internal.renderValue((prop.getValue()), false);
                                // PlainText @ [12:41]
                                __internal.aboutToExecutePosInTemplate(12, 41);
                                __internal.writeValue(PLAIN_TEXT_7_0);
                                // EvalExpression @ [12:43]
                                __internal.aboutToExecutePosInTemplate(12, 43);
                                __internal.renderValue((prop.getKey()), false);
                                // PlainText @ [12:59]
                                __internal.aboutToExecutePosInTemplate(12, 59);
                                __internal.writeValue(PLAIN_TEXT_8_0);
                                // IfBlockEnd @ [9:3]
                                __internal.aboutToExecutePosInTemplate(9, 3);
                            } // if end @ [9:3]
                            // PlainText @ [13:4]
                            __internal.aboutToExecutePosInTemplate(13, 4);
                            __internal.writeValue(PLAIN_TEXT_9_0);
                            // ForBlockEnd @ [8:1]
                            __internal.aboutToExecutePosInTemplate(8, 1);
                        } catch (com.fizzed.rocker.runtime.ContinueException e) {
                            // support for continuing for loops
                        }
                    } // for end @ [8:1]
                } catch (com.fizzed.rocker.runtime.BreakException e) {
                    // support for breaking for loops
                }
                // PlainText @ [14:2]
                __internal.aboutToExecutePosInTemplate(14, 2);
                __internal.writeValue(PLAIN_TEXT_10_0);
                // IfBlockEnd @ [6:1]
                __internal.aboutToExecutePosInTemplate(6, 1);
            } // if end @ [6:1]
            // PlainText @ [16:2]
            __internal.aboutToExecutePosInTemplate(16, 2);
            __internal.writeValue(PLAIN_TEXT_9_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "\n\n";
        static private final String PLAIN_TEXT_1_0 = "\n  <properties>\n";
        static private final String PLAIN_TEXT_2_0 = "\n  ";
        static private final String PLAIN_TEXT_3_0 = "\n    <!--";
        static private final String PLAIN_TEXT_4_0 = "-->\n  ";
        static private final String PLAIN_TEXT_5_0 = "\n    <";
        static private final String PLAIN_TEXT_6_0 = ">";
        static private final String PLAIN_TEXT_7_0 = "</";
        static private final String PLAIN_TEXT_8_0 = ">\n  ";
        static private final String PLAIN_TEXT_9_0 = "\n";
        static private final String PLAIN_TEXT_10_0 = "\n  </properties>\n";

    }

}
