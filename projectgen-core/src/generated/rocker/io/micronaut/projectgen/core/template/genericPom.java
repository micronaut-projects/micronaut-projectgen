package io.micronaut.projectgen.core.template;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import io.micronaut.projectgen.core.buildtools.maven.ParentPom;
// import @ [2:1]
import io.micronaut.projectgen.core.buildtools.maven.MavenBuild;
// import @ [3:1]
import io.micronaut.projectgen.core.buildtools.maven.MavenDependency;
// import @ [4:1]
import io.micronaut.projectgen.core.buildtools.Property;;

/*
 * Auto generated code to render template io/micronaut/projectgen/core/template/genericPom.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class genericPom extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.RAW; }
    static public String getTemplateName() { return "genericPom.rocker.raw"; }
    static public String getTemplatePackageName() { return "io.micronaut.projectgen.core.template"; }
    static public String getHeaderHash() { return "-278082239"; }
    static public long getModifiedAt() { return 1740582842115L; }
    static public String[] getArgumentNames() { return new String[] { "parentPom", "mavenBuild" }; }

    // argument @ [5:2]
    private ParentPom parentPom;
    // argument @ [5:2]
    private MavenBuild mavenBuild;

    public genericPom parentPom(ParentPom parentPom) {
        this.parentPom = parentPom;
        return this;
    }

    public ParentPom parentPom() {
        return this.parentPom;
    }

    public genericPom mavenBuild(MavenBuild mavenBuild) {
        this.mavenBuild = mavenBuild;
        return this;
    }

    public MavenBuild mavenBuild() {
        return this.mavenBuild;
    }

    static public genericPom template(ParentPom parentPom, MavenBuild mavenBuild) {
        return new genericPom()
            .parentPom(parentPom)
            .mavenBuild(mavenBuild);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // \n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n
        static private final byte[] PLAIN_TEXT_0_0;
        // \n
        static private final byte[] PLAIN_TEXT_1_0;
        // \n  <artifactId>
        static private final byte[] PLAIN_TEXT_2_0;
        // </artifactId>\n
        static private final byte[] PLAIN_TEXT_3_0;
        // \n  <dependencies>\n
        static private final byte[] PLAIN_TEXT_4_0;
        // \n  </dependencies>\n  <build>\n    <plugins>\n
        static private final byte[] PLAIN_TEXT_5_0;
        // \n    </plugins>\n  </build>\n</project>\n
        static private final byte[] PLAIN_TEXT_6_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(genericPom.class.getClassLoader(), genericPom.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
            PLAIN_TEXT_4_0 = loader.tryGet("PLAIN_TEXT_4_0");
            PLAIN_TEXT_5_0 = loader.tryGet("PLAIN_TEXT_5_0");
            PLAIN_TEXT_6_0 = loader.tryGet("PLAIN_TEXT_6_0");
        }

        // argument @ [5:2]
        protected final ParentPom parentPom;
        // argument @ [5:2]
        protected final MavenBuild mavenBuild;

        public Template(genericPom model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.parentPom = model.parentPom();
            this.mavenBuild = model.mavenBuild();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [5:51]
            __internal.aboutToExecutePosInTemplate(5, 51);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // IfBlockBegin @ [10:1]
            __internal.aboutToExecutePosInTemplate(10, 1);
            if (parentPom != null) {
                // PlainText @ [10:26]
                __internal.aboutToExecutePosInTemplate(10, 26);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // ValueExpression @ [11:1]
                __internal.aboutToExecutePosInTemplate(11, 1);
                __internal.renderValue(io.micronaut.projectgen.core.template.parentPom.template(parentPom), false);
                // PlainText @ [11:69]
                __internal.aboutToExecutePosInTemplate(11, 69);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // IfBlockEnd @ [10:1]
                __internal.aboutToExecutePosInTemplate(10, 1);
            } // if end @ [10:1]
            // PlainText @ [12:2]
            __internal.aboutToExecutePosInTemplate(12, 2);
            __internal.writeValue(PLAIN_TEXT_2_0);
            // ValueExpression @ [13:15]
            __internal.aboutToExecutePosInTemplate(13, 15);
            __internal.renderValue(mavenBuild.getArtifactId(), false);
            // PlainText @ [13:42]
            __internal.aboutToExecutePosInTemplate(13, 42);
            __internal.writeValue(PLAIN_TEXT_3_0);
            // ValueExpression @ [14:1]
            __internal.aboutToExecutePosInTemplate(14, 1);
            __internal.renderValue(io.micronaut.projectgen.core.template.mavenProperties.template(mavenBuild.getProperties()), false);
            // PlainText @ [14:92]
            __internal.aboutToExecutePosInTemplate(14, 92);
            __internal.writeValue(PLAIN_TEXT_4_0);
            // ForBlockBegin @ [16:1]
            __internal.aboutToExecutePosInTemplate(16, 1);
            try {
                final com.fizzed.rocker.runtime.IterableForIterator<MavenDependency> __forIterator0 = new com.fizzed.rocker.runtime.IterableForIterator<MavenDependency>(mavenBuild.getDependencies(false));
                while (__forIterator0.hasNext()) {
                    final MavenDependency f = __forIterator0.next();
                    try {
                        // PlainText @ [16:63]
                        __internal.aboutToExecutePosInTemplate(16, 63);
                        __internal.writeValue(PLAIN_TEXT_1_0);
                        // ValueExpression @ [17:1]
                        __internal.aboutToExecutePosInTemplate(17, 1);
                        __internal.renderValue(io.micronaut.projectgen.core.template.mavenDependency.template(f.getGroupId(), f.getArtifactId(), f.getMavenScope().toString(), f.getVersion(), false, f.getExclusions()), false);
                        // PlainText @ [17:171]
                        __internal.aboutToExecutePosInTemplate(17, 171);
                        __internal.writeValue(PLAIN_TEXT_1_0);
                        // ForBlockEnd @ [16:1]
                        __internal.aboutToExecutePosInTemplate(16, 1);
                    } catch (com.fizzed.rocker.runtime.ContinueException e) {
                        // support for continuing for loops
                    }
                } // for end @ [16:1]
            } catch (com.fizzed.rocker.runtime.BreakException e) {
                // support for breaking for loops
            }
            // PlainText @ [18:2]
            __internal.aboutToExecutePosInTemplate(18, 2);
            __internal.writeValue(PLAIN_TEXT_5_0);
            // ValueExpression @ [22:1]
            __internal.aboutToExecutePosInTemplate(22, 1);
            __internal.renderValue(mavenBuild.renderPlugins(6), false);
            // PlainText @ [22:29]
            __internal.aboutToExecutePosInTemplate(22, 29);
            __internal.writeValue(PLAIN_TEXT_6_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n";
        static private final String PLAIN_TEXT_1_0 = "\n";
        static private final String PLAIN_TEXT_2_0 = "\n  <artifactId>";
        static private final String PLAIN_TEXT_3_0 = "</artifactId>\n";
        static private final String PLAIN_TEXT_4_0 = "\n  <dependencies>\n";
        static private final String PLAIN_TEXT_5_0 = "\n  </dependencies>\n  <build>\n    <plugins>\n";
        static private final String PLAIN_TEXT_6_0 = "\n    </plugins>\n  </build>\n</project>\n";

    }

}
