package io.micronaut.projectgen.core.template;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import io.micronaut.projectgen.core.generator.Project;
// import @ [2:1]
import io.micronaut.projectgen.core.buildtools.gradle.GradleBuild;
// import @ [3:1]
import io.micronaut.projectgen.core.buildtools.gradle.GradlePlugin;
// import @ [4:1]
import io.micronaut.projectgen.core.buildtools.gradle.GradleDsl;
// import @ [5:1]
import java.util.Collection;;

/*
 * Auto generated code to render template io/micronaut/projectgen/core/template/settingsGradle.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class settingsGradle extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.RAW; }
    static public String getTemplateName() { return "settingsGradle.rocker.raw"; }
    static public String getTemplatePackageName() { return "io.micronaut.projectgen.core.template"; }
    static public String getHeaderHash() { return "1990581586"; }
    static public long getModifiedAt() { return 1740570563355L; }
    static public String[] getArgumentNames() { return new String[] { "project", "gradleBuild", "hasMultiProjectFeature", "moduleNames" }; }

    // argument @ [6:2]
    private Project project;
    // argument @ [6:2]
    private GradleBuild gradleBuild;
    // argument @ [6:2]
    private boolean hasMultiProjectFeature;
    // argument @ [6:2]
    private Collection<String> moduleNames;

    public settingsGradle project(Project project) {
        this.project = project;
        return this;
    }

    public Project project() {
        return this.project;
    }

    public settingsGradle gradleBuild(GradleBuild gradleBuild) {
        this.gradleBuild = gradleBuild;
        return this;
    }

    public GradleBuild gradleBuild() {
        return this.gradleBuild;
    }

    public settingsGradle hasMultiProjectFeature(boolean hasMultiProjectFeature) {
        this.hasMultiProjectFeature = hasMultiProjectFeature;
        return this;
    }

    public boolean hasMultiProjectFeature() {
        return this.hasMultiProjectFeature;
    }

    public settingsGradle moduleNames(Collection<String> moduleNames) {
        this.moduleNames = moduleNames;
        return this;
    }

    public Collection<String> moduleNames() {
        return this.moduleNames;
    }

    static public settingsGradle template(Project project, GradleBuild gradleBuild, boolean hasMultiProjectFeature, Collection<String> moduleNames) {
        return new settingsGradle()
            .project(project)
            .gradleBuild(gradleBuild)
            .hasMultiProjectFeature(hasMultiProjectFeature)
            .moduleNames(moduleNames);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // \n\n
        static private final byte[] PLAIN_TEXT_0_0;
        // \n
        static private final byte[] PLAIN_TEXT_1_0;
        // \nimport 
        static private final byte[] PLAIN_TEXT_2_0;
        // \nplugins {\n
        static private final byte[] PLAIN_TEXT_3_0;
        // \n    id(\"
        static private final byte[] PLAIN_TEXT_4_0;
        // \") 
        static private final byte[] PLAIN_TEXT_5_0;
        // \n}\n\n
        static private final byte[] PLAIN_TEXT_6_0;
        // \n\nrootProject.name=\"
        static private final byte[] PLAIN_TEXT_7_0;
        // \"\n\n
        static private final byte[] PLAIN_TEXT_8_0;
        // \ninclude(\"
        static private final byte[] PLAIN_TEXT_9_0;
        // \")\n
        static private final byte[] PLAIN_TEXT_10_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(settingsGradle.class.getClassLoader(), settingsGradle.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
            PLAIN_TEXT_4_0 = loader.tryGet("PLAIN_TEXT_4_0");
            PLAIN_TEXT_5_0 = loader.tryGet("PLAIN_TEXT_5_0");
            PLAIN_TEXT_6_0 = loader.tryGet("PLAIN_TEXT_6_0");
            PLAIN_TEXT_7_0 = loader.tryGet("PLAIN_TEXT_7_0");
            PLAIN_TEXT_8_0 = loader.tryGet("PLAIN_TEXT_8_0");
            PLAIN_TEXT_9_0 = loader.tryGet("PLAIN_TEXT_9_0");
            PLAIN_TEXT_10_0 = loader.tryGet("PLAIN_TEXT_10_0");
        }

        // argument @ [6:2]
        protected final Project project;
        // argument @ [6:2]
        protected final GradleBuild gradleBuild;
        // argument @ [6:2]
        protected final boolean hasMultiProjectFeature;
        // argument @ [6:2]
        protected final Collection<String> moduleNames;

        public Template(settingsGradle model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.project = model.project();
            this.gradleBuild = model.gradleBuild();
            this.hasMultiProjectFeature = model.hasMultiProjectFeature();
            this.moduleNames = model.moduleNames();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [6:113]
            __internal.aboutToExecutePosInTemplate(6, 113);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // IfBlockBegin @ [8:1]
            __internal.aboutToExecutePosInTemplate(8, 1);
            if (!gradleBuild.getSettingsImports().isEmpty()) {
                // PlainText @ [8:51]
                __internal.aboutToExecutePosInTemplate(8, 51);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // ForBlockBegin @ [9:1]
                __internal.aboutToExecutePosInTemplate(9, 1);
                try {
                    final com.fizzed.rocker.runtime.IterableForIterator<String> __forIterator0 = new com.fizzed.rocker.runtime.IterableForIterator<String>(gradleBuild.getSettingsImports());
                    while (__forIterator0.hasNext()) {
                        final String settingsImport = __forIterator0.next();
                        try {
                            // PlainText @ [9:66]
                            __internal.aboutToExecutePosInTemplate(9, 66);
                            __internal.writeValue(PLAIN_TEXT_2_0);
                            // EvalExpression @ [10:8]
                            __internal.aboutToExecutePosInTemplate(10, 8);
                            __internal.renderValue((settingsImport), false);
                            // PlainText @ [10:25]
                            __internal.aboutToExecutePosInTemplate(10, 25);
                            __internal.writeValue(PLAIN_TEXT_1_0);
                            // ForBlockEnd @ [9:1]
                            __internal.aboutToExecutePosInTemplate(9, 1);
                        } catch (com.fizzed.rocker.runtime.ContinueException e) {
                            // support for continuing for loops
                        }
                    } // for end @ [9:1]
                } catch (com.fizzed.rocker.runtime.BreakException e) {
                    // support for breaking for loops
                }
                // PlainText @ [11:2]
                __internal.aboutToExecutePosInTemplate(11, 2);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // IfBlockEnd @ [8:1]
                __internal.aboutToExecutePosInTemplate(8, 1);
            } // if end @ [8:1]
            // PlainText @ [12:2]
            __internal.aboutToExecutePosInTemplate(12, 2);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [14:1]
            __internal.aboutToExecutePosInTemplate(14, 1);
            __internal.renderValue(gradleBuild.renderSettingsPluginsManagement(), false);
            // PlainText @ [14:47]
            __internal.aboutToExecutePosInTemplate(14, 47);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // IfBlockBegin @ [16:1]
            __internal.aboutToExecutePosInTemplate(16, 1);
            if (!gradleBuild.getSettingsPlugins().isEmpty()) {
                // PlainText @ [16:51]
                __internal.aboutToExecutePosInTemplate(16, 51);
                __internal.writeValue(PLAIN_TEXT_3_0);
                // ForBlockBegin @ [18:1]
                __internal.aboutToExecutePosInTemplate(18, 1);
                try {
                    final com.fizzed.rocker.runtime.IterableForIterator<GradlePlugin> __forIterator1 = new com.fizzed.rocker.runtime.IterableForIterator<GradlePlugin>(gradleBuild.getSettingsPlugins());
                    while (__forIterator1.hasNext()) {
                        final GradlePlugin gradlePlugin = __forIterator1.next();
                        try {
                            // PlainText @ [18:70]
                            __internal.aboutToExecutePosInTemplate(18, 70);
                            __internal.writeValue(PLAIN_TEXT_4_0);
                            // ValueExpression @ [19:9]
                            __internal.aboutToExecutePosInTemplate(19, 9);
                            __internal.renderValue(gradlePlugin.getId(), false);
                            // PlainText @ [19:30]
                            __internal.aboutToExecutePosInTemplate(19, 30);
                            __internal.writeValue(PLAIN_TEXT_5_0);
                            // EvalExpression @ [19:33]
                            __internal.aboutToExecutePosInTemplate(19, 33);
                            __internal.renderValue((gradlePlugin.getVersion() != null ? "version(\"" + gradlePlugin.getVersion() + "\")" : ""), false);
                            // PlainText @ [19:125]
                            __internal.aboutToExecutePosInTemplate(19, 125);
                            __internal.writeValue(PLAIN_TEXT_1_0);
                            // ForBlockEnd @ [18:1]
                            __internal.aboutToExecutePosInTemplate(18, 1);
                        } catch (com.fizzed.rocker.runtime.ContinueException e) {
                            // support for continuing for loops
                        }
                    } // for end @ [18:1]
                } catch (com.fizzed.rocker.runtime.BreakException e) {
                    // support for breaking for loops
                }
                // PlainText @ [20:2]
                __internal.aboutToExecutePosInTemplate(20, 2);
                __internal.writeValue(PLAIN_TEXT_6_0);
                // IfBlockEnd @ [16:1]
                __internal.aboutToExecutePosInTemplate(16, 1);
            } // if end @ [16:1]
            // PlainText @ [23:2]
            __internal.aboutToExecutePosInTemplate(23, 2);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [25:1]
            __internal.aboutToExecutePosInTemplate(25, 1);
            __internal.renderValue(gradleBuild.renderSettingsExtensions(), false);
            // PlainText @ [25:40]
            __internal.aboutToExecutePosInTemplate(25, 40);
            __internal.writeValue(PLAIN_TEXT_7_0);
            // ValueExpression @ [27:19]
            __internal.aboutToExecutePosInTemplate(27, 19);
            __internal.renderValue(project.getName(), false);
            // PlainText @ [27:37]
            __internal.aboutToExecutePosInTemplate(27, 37);
            __internal.writeValue(PLAIN_TEXT_8_0);
            // IfBlockBegin @ [29:1]
            __internal.aboutToExecutePosInTemplate(29, 1);
            if (hasMultiProjectFeature || moduleNames.size() > 1) {
                // PlainText @ [29:57]
                __internal.aboutToExecutePosInTemplate(29, 57);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // ForBlockBegin @ [30:1]
                __internal.aboutToExecutePosInTemplate(30, 1);
                try {
                    final com.fizzed.rocker.runtime.IterableForIterator<String> __forIterator2 = new com.fizzed.rocker.runtime.IterableForIterator<String>(moduleNames);
                    while (__forIterator2.hasNext()) {
                        final String moduleName = __forIterator2.next();
                        try {
                            // PlainText @ [30:41]
                            __internal.aboutToExecutePosInTemplate(30, 41);
                            __internal.writeValue(PLAIN_TEXT_9_0);
                            // ValueExpression @ [31:10]
                            __internal.aboutToExecutePosInTemplate(31, 10);
                            __internal.renderValue(moduleName, false);
                            // PlainText @ [31:21]
                            __internal.aboutToExecutePosInTemplate(31, 21);
                            __internal.writeValue(PLAIN_TEXT_10_0);
                            // ForBlockEnd @ [30:1]
                            __internal.aboutToExecutePosInTemplate(30, 1);
                        } catch (com.fizzed.rocker.runtime.ContinueException e) {
                            // support for continuing for loops
                        }
                    } // for end @ [30:1]
                } catch (com.fizzed.rocker.runtime.BreakException e) {
                    // support for breaking for loops
                }
                // PlainText @ [32:2]
                __internal.aboutToExecutePosInTemplate(32, 2);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // IfBlockEnd @ [29:1]
                __internal.aboutToExecutePosInTemplate(29, 1);
            } // if end @ [29:1]
            // PlainText @ [33:2]
            __internal.aboutToExecutePosInTemplate(33, 2);
            __internal.writeValue(PLAIN_TEXT_1_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "\n\n";
        static private final String PLAIN_TEXT_1_0 = "\n";
        static private final String PLAIN_TEXT_2_0 = "\nimport ";
        static private final String PLAIN_TEXT_3_0 = "\nplugins {\n";
        static private final String PLAIN_TEXT_4_0 = "\n    id(\"";
        static private final String PLAIN_TEXT_5_0 = "\") ";
        static private final String PLAIN_TEXT_6_0 = "\n}\n\n";
        static private final String PLAIN_TEXT_7_0 = "\n\nrootProject.name=\"";
        static private final String PLAIN_TEXT_8_0 = "\"\n\n";
        static private final String PLAIN_TEXT_9_0 = "\ninclude(\"";
        static private final String PLAIN_TEXT_10_0 = "\")\n";

    }

}
