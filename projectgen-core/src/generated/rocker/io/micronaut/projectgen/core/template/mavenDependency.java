package io.micronaut.projectgen.core.template;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import java.util.List;
// import @ [2:1]
import io.micronaut.projectgen.core.buildtools.dependencies.DependencyCoordinate;

/*
 * Auto generated code to render template io/micronaut/projectgen/core/template/mavenDependency.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class mavenDependency extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.RAW; }
    static public String getTemplateName() { return "mavenDependency.rocker.raw"; }
    static public String getTemplatePackageName() { return "io.micronaut.projectgen.core.template"; }
    static public String getHeaderHash() { return "-769206352"; }
    static public long getModifiedAt() { return 1740582826589L; }
    static public String[] getArgumentNames() { return new String[] { "groupId", "artifactId", "scope", "version", "pom", "exclusions" }; }

    // argument @ [3:2]
    private String groupId;
    // argument @ [3:2]
    private String artifactId;
    // argument @ [3:2]
    private String scope;
    // argument @ [3:2]
    private String version;
    // argument @ [3:2]
    private boolean pom;
    // argument @ [3:2]
    private List<DependencyCoordinate> exclusions;

    public mavenDependency groupId(String groupId) {
        this.groupId = groupId;
        return this;
    }

    public String groupId() {
        return this.groupId;
    }

    public mavenDependency artifactId(String artifactId) {
        this.artifactId = artifactId;
        return this;
    }

    public String artifactId() {
        return this.artifactId;
    }

    public mavenDependency scope(String scope) {
        this.scope = scope;
        return this;
    }

    public String scope() {
        return this.scope;
    }

    public mavenDependency version(String version) {
        this.version = version;
        return this;
    }

    public String version() {
        return this.version;
    }

    public mavenDependency pom(boolean pom) {
        this.pom = pom;
        return this;
    }

    public boolean pom() {
        return this.pom;
    }

    public mavenDependency exclusions(List<DependencyCoordinate> exclusions) {
        this.exclusions = exclusions;
        return this;
    }

    public List<DependencyCoordinate> exclusions() {
        return this.exclusions;
    }

    static public mavenDependency template(String groupId, String artifactId, String scope, String version, boolean pom, List<DependencyCoordinate> exclusions) {
        return new mavenDependency()
            .groupId(groupId)
            .artifactId(artifactId)
            .scope(scope)
            .version(version)
            .pom(pom)
            .exclusions(exclusions);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // \n\n    <dependency>\n      <groupId>
        static private final byte[] PLAIN_TEXT_0_0;
        // </groupId>\n      <artifactId>
        static private final byte[] PLAIN_TEXT_1_0;
        // </artifactId>\n
        static private final byte[] PLAIN_TEXT_2_0;
        // \n      <version>
        static private final byte[] PLAIN_TEXT_3_0;
        // </version>\n
        static private final byte[] PLAIN_TEXT_4_0;
        // \n
        static private final byte[] PLAIN_TEXT_5_0;
        // \n      <type>pom</type>\n
        static private final byte[] PLAIN_TEXT_6_0;
        // \n      <scope>
        static private final byte[] PLAIN_TEXT_7_0;
        // </scope>\n
        static private final byte[] PLAIN_TEXT_8_0;
        // \n      <exclusions>\n
        static private final byte[] PLAIN_TEXT_9_0;
        // \n          <exclusion>\n            <groupId>
        static private final byte[] PLAIN_TEXT_10_0;
        // </groupId>\n            <artifactId>
        static private final byte[] PLAIN_TEXT_11_0;
        // </artifactId>\n          </exclusion>\n
        static private final byte[] PLAIN_TEXT_12_0;
        // \n        </exclusions>\n
        static private final byte[] PLAIN_TEXT_13_0;
        // \n    </dependency>\n
        static private final byte[] PLAIN_TEXT_14_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(mavenDependency.class.getClassLoader(), mavenDependency.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
            PLAIN_TEXT_4_0 = loader.tryGet("PLAIN_TEXT_4_0");
            PLAIN_TEXT_5_0 = loader.tryGet("PLAIN_TEXT_5_0");
            PLAIN_TEXT_6_0 = loader.tryGet("PLAIN_TEXT_6_0");
            PLAIN_TEXT_7_0 = loader.tryGet("PLAIN_TEXT_7_0");
            PLAIN_TEXT_8_0 = loader.tryGet("PLAIN_TEXT_8_0");
            PLAIN_TEXT_9_0 = loader.tryGet("PLAIN_TEXT_9_0");
            PLAIN_TEXT_10_0 = loader.tryGet("PLAIN_TEXT_10_0");
            PLAIN_TEXT_11_0 = loader.tryGet("PLAIN_TEXT_11_0");
            PLAIN_TEXT_12_0 = loader.tryGet("PLAIN_TEXT_12_0");
            PLAIN_TEXT_13_0 = loader.tryGet("PLAIN_TEXT_13_0");
            PLAIN_TEXT_14_0 = loader.tryGet("PLAIN_TEXT_14_0");
        }

        // argument @ [3:2]
        protected final String groupId;
        // argument @ [3:2]
        protected final String artifactId;
        // argument @ [3:2]
        protected final String scope;
        // argument @ [3:2]
        protected final String version;
        // argument @ [3:2]
        protected final boolean pom;
        // argument @ [3:2]
        protected final List<DependencyCoordinate> exclusions;

        public Template(mavenDependency model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.groupId = model.groupId();
            this.artifactId = model.artifactId();
            this.scope = model.scope();
            this.version = model.version();
            this.pom = model.pom();
            this.exclusions = model.exclusions();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [3:123]
            __internal.aboutToExecutePosInTemplate(3, 123);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [6:16]
            __internal.aboutToExecutePosInTemplate(6, 16);
            __internal.renderValue(groupId, false);
            // PlainText @ [6:24]
            __internal.aboutToExecutePosInTemplate(6, 24);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // ValueExpression @ [7:19]
            __internal.aboutToExecutePosInTemplate(7, 19);
            __internal.renderValue(artifactId, false);
            // PlainText @ [7:30]
            __internal.aboutToExecutePosInTemplate(7, 30);
            __internal.writeValue(PLAIN_TEXT_2_0);
            // IfBlockBegin @ [8:1]
            __internal.aboutToExecutePosInTemplate(8, 1);
            if (version != null) {
                // PlainText @ [8:24]
                __internal.aboutToExecutePosInTemplate(8, 24);
                __internal.writeValue(PLAIN_TEXT_3_0);
                // ValueExpression @ [9:16]
                __internal.aboutToExecutePosInTemplate(9, 16);
                __internal.renderValue(version, false);
                // PlainText @ [9:24]
                __internal.aboutToExecutePosInTemplate(9, 24);
                __internal.writeValue(PLAIN_TEXT_4_0);
                // IfBlockEnd @ [8:1]
                __internal.aboutToExecutePosInTemplate(8, 1);
            } // if end @ [8:1]
            // PlainText @ [10:2]
            __internal.aboutToExecutePosInTemplate(10, 2);
            __internal.writeValue(PLAIN_TEXT_5_0);
            // IfBlockBegin @ [11:1]
            __internal.aboutToExecutePosInTemplate(11, 1);
            if (pom) {
                // PlainText @ [11:12]
                __internal.aboutToExecutePosInTemplate(11, 12);
                __internal.writeValue(PLAIN_TEXT_6_0);
                // IfBlockEnd @ [11:1]
                __internal.aboutToExecutePosInTemplate(11, 1);
            } // if end @ [11:1]
            // PlainText @ [13:2]
            __internal.aboutToExecutePosInTemplate(13, 2);
            __internal.writeValue(PLAIN_TEXT_5_0);
            // IfBlockBegin @ [14:1]
            __internal.aboutToExecutePosInTemplate(14, 1);
            if (scope != null) {
                // PlainText @ [14:22]
                __internal.aboutToExecutePosInTemplate(14, 22);
                __internal.writeValue(PLAIN_TEXT_7_0);
                // ValueExpression @ [15:14]
                __internal.aboutToExecutePosInTemplate(15, 14);
                __internal.renderValue(scope, false);
                // PlainText @ [15:20]
                __internal.aboutToExecutePosInTemplate(15, 20);
                __internal.writeValue(PLAIN_TEXT_8_0);
                // IfBlockEnd @ [14:1]
                __internal.aboutToExecutePosInTemplate(14, 1);
            } // if end @ [14:1]
            // PlainText @ [16:2]
            __internal.aboutToExecutePosInTemplate(16, 2);
            __internal.writeValue(PLAIN_TEXT_5_0);
            // IfBlockBegin @ [17:1]
            __internal.aboutToExecutePosInTemplate(17, 1);
            if (exclusions != null && !exclusions.isEmpty()) {
                // PlainText @ [17:52]
                __internal.aboutToExecutePosInTemplate(17, 52);
                __internal.writeValue(PLAIN_TEXT_9_0);
                // ForBlockBegin @ [19:1]
                __internal.aboutToExecutePosInTemplate(19, 1);
                try {
                    final com.fizzed.rocker.runtime.IterableForIterator<DependencyCoordinate> __forIterator0 = new com.fizzed.rocker.runtime.IterableForIterator<DependencyCoordinate>(exclusions);
                    while (__forIterator0.hasNext()) {
                        final DependencyCoordinate dependency = __forIterator0.next();
                        try {
                            // PlainText @ [19:54]
                            __internal.aboutToExecutePosInTemplate(19, 54);
                            __internal.writeValue(PLAIN_TEXT_10_0);
                            // ValueExpression @ [21:22]
                            __internal.aboutToExecutePosInTemplate(21, 22);
                            __internal.renderValue(dependency.getGroupId(), false);
                            // PlainText @ [21:46]
                            __internal.aboutToExecutePosInTemplate(21, 46);
                            __internal.writeValue(PLAIN_TEXT_11_0);
                            // ValueExpression @ [22:25]
                            __internal.aboutToExecutePosInTemplate(22, 25);
                            __internal.renderValue(dependency.getArtifactId(), false);
                            // PlainText @ [22:52]
                            __internal.aboutToExecutePosInTemplate(22, 52);
                            __internal.writeValue(PLAIN_TEXT_12_0);
                            // ForBlockEnd @ [19:1]
                            __internal.aboutToExecutePosInTemplate(19, 1);
                        } catch (com.fizzed.rocker.runtime.ContinueException e) {
                            // support for continuing for loops
                        }
                    } // for end @ [19:1]
                } catch (com.fizzed.rocker.runtime.BreakException e) {
                    // support for breaking for loops
                }
                // PlainText @ [24:2]
                __internal.aboutToExecutePosInTemplate(24, 2);
                __internal.writeValue(PLAIN_TEXT_13_0);
                // IfBlockEnd @ [17:1]
                __internal.aboutToExecutePosInTemplate(17, 1);
            } // if end @ [17:1]
            // PlainText @ [26:2]
            __internal.aboutToExecutePosInTemplate(26, 2);
            __internal.writeValue(PLAIN_TEXT_14_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "\n\n    <dependency>\n      <groupId>";
        static private final String PLAIN_TEXT_1_0 = "</groupId>\n      <artifactId>";
        static private final String PLAIN_TEXT_2_0 = "</artifactId>\n";
        static private final String PLAIN_TEXT_3_0 = "\n      <version>";
        static private final String PLAIN_TEXT_4_0 = "</version>\n";
        static private final String PLAIN_TEXT_5_0 = "\n";
        static private final String PLAIN_TEXT_6_0 = "\n      <type>pom</type>\n";
        static private final String PLAIN_TEXT_7_0 = "\n      <scope>";
        static private final String PLAIN_TEXT_8_0 = "</scope>\n";
        static private final String PLAIN_TEXT_9_0 = "\n      <exclusions>\n";
        static private final String PLAIN_TEXT_10_0 = "\n          <exclusion>\n            <groupId>";
        static private final String PLAIN_TEXT_11_0 = "</groupId>\n            <artifactId>";
        static private final String PLAIN_TEXT_12_0 = "</artifactId>\n          </exclusion>\n";
        static private final String PLAIN_TEXT_13_0 = "\n        </exclusions>\n";
        static private final String PLAIN_TEXT_14_0 = "\n    </dependency>\n";

    }

}
