package io.micronaut.projectgen.core.template;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;

/*
 * Auto generated code to render template io/micronaut/projectgen/core/template/mavenPlugin.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class mavenPlugin extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.RAW; }
    static public String getTemplateName() { return "mavenPlugin.rocker.raw"; }
    static public String getTemplatePackageName() { return "io.micronaut.projectgen.core.template"; }
    static public String getHeaderHash() { return "731999644"; }
    static public long getModifiedAt() { return 1740582083940L; }
    static public String[] getArgumentNames() { return new String[] { "groupId", "artifactId" }; }

    // argument @ [1:2]
    private String groupId;
    // argument @ [1:2]
    private String artifactId;

    public mavenPlugin groupId(String groupId) {
        this.groupId = groupId;
        return this;
    }

    public String groupId() {
        return this.groupId;
    }

    public mavenPlugin artifactId(String artifactId) {
        this.artifactId = artifactId;
        return this;
    }

    public String artifactId() {
        return this.artifactId;
    }

    static public mavenPlugin template(String groupId, String artifactId) {
        return new mavenPlugin()
            .groupId(groupId)
            .artifactId(artifactId);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // \n<plugin>\n  <groupId>
        static private final byte[] PLAIN_TEXT_0_0;
        // </groupId>\n  <artifactId>
        static private final byte[] PLAIN_TEXT_1_0;
        // </artifactId>\n</plugin>\n
        static private final byte[] PLAIN_TEXT_2_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(mavenPlugin.class.getClassLoader(), mavenPlugin.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
        }

        // argument @ [1:2]
        protected final String groupId;
        // argument @ [1:2]
        protected final String artifactId;

        public Template(mavenPlugin model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.groupId = model.groupId();
            this.artifactId = model.artifactId();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [1:41]
            __internal.aboutToExecutePosInTemplate(1, 41);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [3:12]
            __internal.aboutToExecutePosInTemplate(3, 12);
            __internal.renderValue(groupId, false);
            // PlainText @ [3:20]
            __internal.aboutToExecutePosInTemplate(3, 20);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // ValueExpression @ [4:15]
            __internal.aboutToExecutePosInTemplate(4, 15);
            __internal.renderValue(artifactId, false);
            // PlainText @ [4:26]
            __internal.aboutToExecutePosInTemplate(4, 26);
            __internal.writeValue(PLAIN_TEXT_2_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "\n<plugin>\n  <groupId>";
        static private final String PLAIN_TEXT_1_0 = "</groupId>\n  <artifactId>";
        static private final String PLAIN_TEXT_2_0 = "</artifactId>\n</plugin>\n";

    }

}
