package io.micronaut.projectgen.core.template;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;

/*
 * Auto generated code to render template io/micronaut/projectgen/core/template/markdownLink.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class markdownLink extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.RAW; }
    static public String getTemplateName() { return "markdownLink.rocker.raw"; }
    static public String getTemplatePackageName() { return "io.micronaut.projectgen.core.template"; }
    static public String getHeaderHash() { return "549316996"; }
    static public long getModifiedAt() { return 1709045073512L; }
    static public String[] getArgumentNames() { return new String[] { "label", "href" }; }

    // argument @ [1:2]
    private String label;
    // argument @ [1:2]
    private String href;

    public markdownLink label(String label) {
        this.label = label;
        return this;
    }

    public String label() {
        return this.label;
    }

    public markdownLink href(String href) {
        this.href = href;
        return this;
    }

    public String href() {
        return this.href;
    }

    static public markdownLink template(String label, String href) {
        return new markdownLink()
            .label(label)
            .href(href);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // \n- [
        static private final byte[] PLAIN_TEXT_0_0;
        // ](
        static private final byte[] PLAIN_TEXT_1_0;
        // )
        static private final byte[] PLAIN_TEXT_2_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(markdownLink.class.getClassLoader(), markdownLink.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
        }

        // argument @ [1:2]
        protected final String label;
        // argument @ [1:2]
        protected final String href;

        public Template(markdownLink model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.label = model.label();
            this.href = model.href();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [1:33]
            __internal.aboutToExecutePosInTemplate(1, 33);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ValueExpression @ [2:4]
            __internal.aboutToExecutePosInTemplate(2, 4);
            __internal.renderValue(label, false);
            // PlainText @ [2:10]
            __internal.aboutToExecutePosInTemplate(2, 10);
            __internal.writeValue(PLAIN_TEXT_1_0);
            // ValueExpression @ [2:12]
            __internal.aboutToExecutePosInTemplate(2, 12);
            __internal.renderValue(href, false);
            // PlainText @ [2:17]
            __internal.aboutToExecutePosInTemplate(2, 17);
            __internal.writeValue(PLAIN_TEXT_2_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "\n- [";
        static private final String PLAIN_TEXT_1_0 = "](";
        static private final String PLAIN_TEXT_2_0 = ")";

    }

}
