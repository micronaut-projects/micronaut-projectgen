package io.micronaut.projectgen.core.template;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import io.micronaut.projectgen.core.buildtools.gradle.GradleRepository;
// import @ [2:1]
import java.util.List;

/*
 * Auto generated code to render template io/micronaut/projectgen/core/template/settingsPluginManagement.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class settingsPluginManagement extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.RAW; }
    static public String getTemplateName() { return "settingsPluginManagement.rocker.raw"; }
    static public String getTemplatePackageName() { return "io.micronaut.projectgen.core.template"; }
    static public String getHeaderHash() { return "-1259096466"; }
    static public long getModifiedAt() { return 1740570499866L; }
    static public String[] getArgumentNames() { return new String[] { "gradleRepositories" }; }

    // argument @ [3:2]
    private List<GradleRepository> gradleRepositories;

    public settingsPluginManagement gradleRepositories(List<GradleRepository> gradleRepositories) {
        this.gradleRepositories = gradleRepositories;
        return this;
    }

    public List<GradleRepository> gradleRepositories() {
        return this.gradleRepositories;
    }

    static public settingsPluginManagement template(List<GradleRepository> gradleRepositories) {
        return new settingsPluginManagement()
            .gradleRepositories(gradleRepositories);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // \npluginManagement {\n    repositories {\n
        static private final byte[] PLAIN_TEXT_0_0;
        // \n
        static private final byte[] PLAIN_TEXT_1_0;
        // \n    }\n}\n
        static private final byte[] PLAIN_TEXT_2_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(settingsPluginManagement.class.getClassLoader(), settingsPluginManagement.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
        }

        // argument @ [3:2]
        protected final List<GradleRepository> gradleRepositories;

        public Template(settingsPluginManagement model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.gradleRepositories = model.gradleRepositories();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [3:50]
            __internal.aboutToExecutePosInTemplate(3, 50);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // ForBlockBegin @ [6:1]
            __internal.aboutToExecutePosInTemplate(6, 1);
            try {
                final com.fizzed.rocker.runtime.IterableForIterator<GradleRepository> __forIterator0 = new com.fizzed.rocker.runtime.IterableForIterator<GradleRepository>(gradleRepositories);
                while (__forIterator0.hasNext()) {
                    final GradleRepository repo = __forIterator0.next();
                    try {
                        // PlainText @ [6:51]
                        __internal.aboutToExecutePosInTemplate(6, 51);
                        __internal.writeValue(PLAIN_TEXT_1_0);
                        // EvalExpression @ [7:1]
                        __internal.aboutToExecutePosInTemplate(7, 1);
                        __internal.renderValue((repo.render(8)), false);
                        // PlainText @ [7:18]
                        __internal.aboutToExecutePosInTemplate(7, 18);
                        __internal.writeValue(PLAIN_TEXT_1_0);
                        // ForBlockEnd @ [6:1]
                        __internal.aboutToExecutePosInTemplate(6, 1);
                    } catch (com.fizzed.rocker.runtime.ContinueException e) {
                        // support for continuing for loops
                    }
                } // for end @ [6:1]
            } catch (com.fizzed.rocker.runtime.BreakException e) {
                // support for breaking for loops
            }
            // PlainText @ [8:2]
            __internal.aboutToExecutePosInTemplate(8, 2);
            __internal.writeValue(PLAIN_TEXT_2_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "\npluginManagement {\n    repositories {\n";
        static private final String PLAIN_TEXT_1_0 = "\n";
        static private final String PLAIN_TEXT_2_0 = "\n    }\n}\n";

    }

}
