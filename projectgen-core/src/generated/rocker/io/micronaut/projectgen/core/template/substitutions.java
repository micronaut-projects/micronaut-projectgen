package io.micronaut.projectgen.core.template;

import java.io.IOException;
import com.fizzed.rocker.ForIterator;
import com.fizzed.rocker.RenderingException;
import com.fizzed.rocker.RockerContent;
import com.fizzed.rocker.RockerOutput;
import com.fizzed.rocker.runtime.DefaultRockerTemplate;
import com.fizzed.rocker.runtime.PlainTextUnloadedClassLoader;
// import @ [1:1]
import io.micronaut.projectgen.core.buildtools.dependencies.Substitution;
// import @ [2:1]
import java.util.Set;

/*
 * Auto generated code to render template io/micronaut/projectgen/core/template/substitutions.rocker.raw
 * Do not edit this file. Changes will eventually be overwritten by Rocker parser!
 */
@SuppressWarnings("unused")
public class substitutions extends com.fizzed.rocker.runtime.DefaultRockerModel {

    static public com.fizzed.rocker.ContentType getContentType() { return com.fizzed.rocker.ContentType.RAW; }
    static public String getTemplateName() { return "substitutions.rocker.raw"; }
    static public String getTemplatePackageName() { return "io.micronaut.projectgen.core.template"; }
    static public String getHeaderHash() { return "562268561"; }
    static public long getModifiedAt() { return 1740570680707L; }
    static public String[] getArgumentNames() { return new String[] { "substitutions" }; }

    // argument @ [3:2]
    private Set<Substitution> substitutions;

    public substitutions substitutions(Set<Substitution> substitutions) {
        this.substitutions = substitutions;
        return this;
    }

    public Set<Substitution> substitutions() {
        return this.substitutions;
    }

    static public substitutions template(Set<Substitution> substitutions) {
        return new substitutions()
            .substitutions(substitutions);
    }

    @Override
    protected DefaultRockerTemplate buildTemplate() throws RenderingException {
        // optimized for convenience (runtime auto reloading enabled if rocker.reloading=true)
        return com.fizzed.rocker.runtime.RockerRuntime.getInstance().getBootstrap().template(this.getClass(), this);
    }

    static public class Template extends com.fizzed.rocker.runtime.DefaultRockerTemplate {

        // \n\n
        static private final byte[] PLAIN_TEXT_0_0;
        // \nconfigurations.all {\n    resolutionStrategy.dependencySubstitution {\n
        static private final byte[] PLAIN_TEXT_1_0;
        // \n        substitute(module(\"
        static private final byte[] PLAIN_TEXT_2_0;
        // :
        static private final byte[] PLAIN_TEXT_3_0;
        // \"))\n            .using(module(\"
        static private final byte[] PLAIN_TEXT_4_0;
        // \"))\n
        static private final byte[] PLAIN_TEXT_5_0;
        // \n    }\n}\n
        static private final byte[] PLAIN_TEXT_6_0;
        // \n
        static private final byte[] PLAIN_TEXT_7_0;

        static {
            PlainTextUnloadedClassLoader loader = PlainTextUnloadedClassLoader.tryLoad(substitutions.class.getClassLoader(), substitutions.class.getName() + "$PlainText", "UTF-8");
            PLAIN_TEXT_0_0 = loader.tryGet("PLAIN_TEXT_0_0");
            PLAIN_TEXT_1_0 = loader.tryGet("PLAIN_TEXT_1_0");
            PLAIN_TEXT_2_0 = loader.tryGet("PLAIN_TEXT_2_0");
            PLAIN_TEXT_3_0 = loader.tryGet("PLAIN_TEXT_3_0");
            PLAIN_TEXT_4_0 = loader.tryGet("PLAIN_TEXT_4_0");
            PLAIN_TEXT_5_0 = loader.tryGet("PLAIN_TEXT_5_0");
            PLAIN_TEXT_6_0 = loader.tryGet("PLAIN_TEXT_6_0");
            PLAIN_TEXT_7_0 = loader.tryGet("PLAIN_TEXT_7_0");
        }

        // argument @ [3:2]
        protected final Set<Substitution> substitutions;

        public Template(substitutions model) {
            super(model);
            __internal.setCharset("UTF-8");
            __internal.setContentType(getContentType());
            __internal.setTemplateName(getTemplateName());
            __internal.setTemplatePackageName(getTemplatePackageName());
            this.substitutions = model.substitutions();
        }

        @Override
        protected void __doRender() throws IOException, RenderingException {
            // PlainText @ [3:40]
            __internal.aboutToExecutePosInTemplate(3, 40);
            __internal.writeValue(PLAIN_TEXT_0_0);
            // IfBlockBegin @ [5:1]
            __internal.aboutToExecutePosInTemplate(5, 1);
            if (substitutions != null) {
                // PlainText @ [5:30]
                __internal.aboutToExecutePosInTemplate(5, 30);
                __internal.writeValue(PLAIN_TEXT_1_0);
                // ForBlockBegin @ [8:1]
                __internal.aboutToExecutePosInTemplate(8, 1);
                try {
                    com.fizzed.rocker.runtime.Java8Iterator.forEach(substitutions, (substitution) -> {
                        try {
                            // PlainText @ [8:38]
                            __internal.aboutToExecutePosInTemplate(8, 38);
                            __internal.writeValue(PLAIN_TEXT_2_0);
                            // ValueExpression @ [9:28]
                            __internal.aboutToExecutePosInTemplate(9, 28);
                            __internal.renderValue(substitution.getTarget().getGroupId(), false);
                            // PlainText @ [9:66]
                            __internal.aboutToExecutePosInTemplate(9, 66);
                            __internal.writeValue(PLAIN_TEXT_3_0);
                            // ValueExpression @ [9:67]
                            __internal.aboutToExecutePosInTemplate(9, 67);
                            __internal.renderValue(substitution.getTarget().getArtifactId(), false);
                            // PlainText @ [9:108]
                            __internal.aboutToExecutePosInTemplate(9, 108);
                            __internal.writeValue(PLAIN_TEXT_4_0);
                            // ValueExpression @ [10:28]
                            __internal.aboutToExecutePosInTemplate(10, 28);
                            __internal.renderValue(substitution.getReplacement().getGroupId(), false);
                            // PlainText @ [10:71]
                            __internal.aboutToExecutePosInTemplate(10, 71);
                            __internal.writeValue(PLAIN_TEXT_3_0);
                            // ValueExpression @ [10:72]
                            __internal.aboutToExecutePosInTemplate(10, 72);
                            __internal.renderValue(substitution.getReplacement().getArtifactId(), false);
                            // PlainText @ [10:118]
                            __internal.aboutToExecutePosInTemplate(10, 118);
                            __internal.writeValue(PLAIN_TEXT_3_0);
                            // ValueExpression @ [10:119]
                            __internal.aboutToExecutePosInTemplate(10, 119);
                            __internal.renderValue(substitution.getReplacement().getVersion(), false);
                            // PlainText @ [10:162]
                            __internal.aboutToExecutePosInTemplate(10, 162);
                            __internal.writeValue(PLAIN_TEXT_5_0);
                            // ForBlockEnd @ [8:1]
                            __internal.aboutToExecutePosInTemplate(8, 1);
                        } catch (com.fizzed.rocker.runtime.ContinueException e) {
                            // support for continuing for loops
                        }
                    }); // for end @ [8:1]
                } catch (com.fizzed.rocker.runtime.BreakException e) {
                    // support for breaking for loops
                }
                // PlainText @ [11:2]
                __internal.aboutToExecutePosInTemplate(11, 2);
                __internal.writeValue(PLAIN_TEXT_6_0);
                // IfBlockEnd @ [5:1]
                __internal.aboutToExecutePosInTemplate(5, 1);
            } // if end @ [5:1]
            // PlainText @ [14:2]
            __internal.aboutToExecutePosInTemplate(14, 2);
            __internal.writeValue(PLAIN_TEXT_7_0);
        }
    }

    private static class PlainText {

        static private final String PLAIN_TEXT_0_0 = "\n\n";
        static private final String PLAIN_TEXT_1_0 = "\nconfigurations.all {\n    resolutionStrategy.dependencySubstitution {\n";
        static private final String PLAIN_TEXT_2_0 = "\n        substitute(module(\"";
        static private final String PLAIN_TEXT_3_0 = ":";
        static private final String PLAIN_TEXT_4_0 = "\"))\n            .using(module(\"";
        static private final String PLAIN_TEXT_5_0 = "\"))\n";
        static private final String PLAIN_TEXT_6_0 = "\n    }\n}\n";
        static private final String PLAIN_TEXT_7_0 = "\n";

    }

}
